"""
Uses seaborn to plot.
Takes old csv files from paper publication as inputs.
pandas.DataFrames are not the original input but the csv generated by the experiment is converted
into them
"""
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import argparse
import csv

# Import python lib
import sys
import os


def csv_to_panda(filename):
    """
    Should return tidy panda data
    """
    print("Read panda data from csv file")
    data = pd.read_csv(filename)
    return data
    


def plot_latency(data, analysis_type, pdffilename):

    print(" ------------------------------------------------ plot_latency_data_rates_automotive ------------------------------------------------ ")
    
    # Colors
    current_palette = sns.color_palette()
    colors = [current_palette[2], current_palette[1], current_palette[0], current_palette[3], current_palette[4], current_palette[5], current_palette[6]]
    	
    # Assuming df is your pandas DataFrame
    if analysis_type == "sporadic":
        data = data[data['evaluation_type'] == 'latency_sporadic_analysis']
    elif analysis_type == "synchronous":
        data = data[data['evaluation_type'] == 'latency_synchronous_analysis']
    else:
        assert False, "invalid choice"

    # Convert values to ms
    data["latency_value"] = 0.001 * 0.001 * data["latency_value"]
    # Create diagram
    flierprops = dict(marker='o', markerfacecolor='black', markersize=6,  linestyle='none', markeredgecolor="grey")
    plt.figure(figsize=(10, 3.2))
    sns.set(style="whitegrid", palette="muted", font_scale=1)
    ax =sns.boxplot(x="nbr_object_streams", y='latency_value',  data=data, dodge=True, linewidth=1.0, color = "limegreen" , flierprops=flierprops) #, hue_order=hue_order)


       
    print("Worst case latency cluster analysis: " + str(data["latency_value"].max()))
    
    # Format axis values
    ax.tick_params(labelsize=14)
    ax.set_xlabel("Number of sensor data sample streams", fontsize = 1)
    ax.set_ylabel("Sample stream \n WCRTs [ms]", fontsize = 18)
    
    
    plt.plot()
    plt.tight_layout()

    plt.savefig(pdffilename)
    
    
    










def plot_utilization(data, pdffilename):


    print("---------------------- plot_utilization --------------------")

    # link utilizations (boxplot)
    # max link utilization als höchster ausreißer etc....

    # Colors
    current_palette = sns.color_palette()
    colors = [current_palette[7], current_palette[5], current_palette[2], current_palette[3], current_palette[4], current_palette[5], current_palette[6]]

    # Filter the data
    #data = data[data['stream_name'].str.contains("ADASStream")]
    #data = data[(data["jitter"] == 500*1000)]

    data1 = data[data['port'].str.contains("Port_2_SW_VR")]
    data2 = data[data['port'].str.contains("Port_2_SW_VL")]
    data = pd.concat([data1, data2])
    
    print(data)
    
    # Convert
    data["utilization"] = 100 * data["utilization"]
    
    # Create the figure
    plt.figure(figsize=(10,3.1))
    sns.set(style="darkgrid", palette="muted", font_scale=1)
    ax = sns.barplot(data=data, x="nbr_streams",y='utilization', hue="port", palette=colors)
    #ax =sns.boxplot(x='nbr_streams', y='utilization', data=data, hue = "port", dodge=True, linewidth=1.0, palette=colors)

    # Format axis values
    ax.tick_params(labelsize=18)
    ax.set_xlabel("Number of ADAS sensor data streams", fontsize = 14)
    ax.set_ylabel("Output port\nutilization in %", fontsize = 17)
    ax.set_yticks([0,10,20,30,40,50,60,70,80,90,100],[0,"",20,"",40,"",60,"",80,"",100])
    ax.set(ylim=(-2, 102))
    
    ax.legend(loc='upper left', fontsize=12)
    leg = ax.get_legend()
    leg.set_title("Switch output ports",prop={'size':15,'weight':'bold'})
    new_labels = ["To NIC 1", "To NIC 2"]
    for t, l in zip(leg.texts, new_labels): 
        t.set_text(l)
        


    plt.plot()
    plt.tight_layout()
    

    plt.savefig(pdffilename)
    



    
    
if __name__ == '__main__':

    parser = argparse.ArgumentParser(epilog='NOTE: Takes data from seaborn exporter as csv')
    parser.add_argument("--csv",type=str, default="./output/analysis_and_simulation_results.csv",
            help="Filename of the .csv file")
    parser.add_argument("--method", type=int, default=0,
            help="The file and matplotlib supported fileype to which the plot is written. Specify a filename")

    args = parser.parse_args()
    
    input_file = "./output/utilization.csv"
    data = csv_to_panda(input_file)
    plot_utilization(data , "./output/utilization.pdf")
    
    input_file = "./output/analysis_output.csv"
    data = csv_to_panda(input_file)
    plot_latency(data , "synchronous", "./output/sync_latency.pdf")
    

    input_file = "./output/analysis_output.csv"
    data = csv_to_panda(input_file)
    plot_latency(data , "sporadic", "./output/sporadic_latency.pdf")







